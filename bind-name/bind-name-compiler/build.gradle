apply plugin: "java-library"
apply plugin: "maven-publish"

dependencies {
    implementation fileTree(include: ["*.jar"], dir: "libs")
    implementation "com.google.auto.service:auto-service:$rootProject.ext.auto_service"
    implementation "com.java.lib:oil:$rootProject.ext.oil"
    implementation "com.squareup:javapoet:$rootProject.ext.javapoet"
}

javadoc {
    options.encoding = "UTF-8"
}

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

task configured {
    println project.name + " configured enter."
    if (gradle.startParameter.taskRequests && gradle.startParameter.taskRequests[0].args[0].endsWith("uploadArchives") && gradle.startParameter.taskRequests[0].args[0].startsWith(":bind-name:bind-name-compiler")) {
        println project.name + "configured uploadArchives enter."
        dependencies.add("api", "com.java.lib:bind-name-api:0.0.01")
        dependencies.add("api", "com.java.lib:processor:0.0.00")
    }
    else {
        if (findProject(":bind-name:bind-name-api")) {
            dependencies.add("api", project(":bind-name:bind-name-api"))
        }
        else {
            dependencies.add("api", "com.java.lib:bind-name-api:0.0.01")
        }

        if (findProject(":processor")) {
            dependencies.add("api", project(":processor"))
        }
        else {
            dependencies.add("api", "com.java.lib:processor:0.0.00")
        }
    }
}

task javadocJar(type: Jar) {
    classifier "javadoc"
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allSource
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId "com.java.lib"
            artifactId "bind-name-compiler"
            version "0.0.02"
            description "bind name to view annotation processor"
            from components.java
            artifact javadocJar
            artifact sourcesJar
            pom.withXml {
                def dependencies = asNode().appendNode("dependencies")
                wrapIntoDependencies(dependencies, configurations.api, "compile")
                wrapIntoDependencies(dependencies, configurations.implementation, "provided")
                wrapIntoDependencies(dependencies, configurations.compileOnly, "runtime")
                wrapIntoDependencies(dependencies, configurations.testImplementation, "test")
            }
        }
    }
    repositories {
        maven {
            url project.property("deploy.release.url")
            credentials {
                username project.property("deploy.release.user.name")
                password project.property("deploy.release.user.password")
            }
        }
    }
}
